package mocks

import (
	"context"

	"github.com/dessima/gerenciador-chaves-api/entity"
	"github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// ReservationRepository is an autogenerated mock type for the ReservationRepository type
type ReservationRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, reservation
func (_m *ReservationRepository) Create(ctx context.Context, reservation *entity.Reservation) error {
	ret := _m.Called(ctx, reservation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Reservation) error); ok {
		r0 = rf(ctx, reservation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *ReservationRepository) GetAll(ctx context.Context) ([]*entity.Reservation, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Reservation
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Reservation); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveReservationByKey provides a mock function with given fields: ctx, keyID
func (_m *ReservationRepository) GetActiveReservationByKey(ctx context.Context, keyID primitive.ObjectID) (*entity.Reservation, error) {
	ret := _m.Called(ctx, keyID)

	var r0 *entity.Reservation
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *entity.Reservation); ok {
		r0 = rf(ctx, keyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, keyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ReservationRepository) GetByID(ctx context.Context, id primitive.ObjectID) (*entity.Reservation, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Reservation
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *entity.Reservation); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUserID provides a mock function with given fields: ctx, userID
func (_m *ReservationRepository) GetByUserID(ctx context.Context, userID primitive.ObjectID) ([]*entity.Reservation, error) {
	ret := _m.Called(ctx, userID)

	var r0 []*entity.Reservation
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) []*entity.Reservation); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOverdueReservations provides a mock function with given fields: ctx
func (_m *ReservationRepository) GetOverdueReservations(ctx context.Context) ([]*entity.Reservation, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Reservation
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Reservation); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Reservation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, reservation
func (_m *ReservationRepository) Update(ctx context.Context, reservation *entity.Reservation) error {
	ret := _m.Called(ctx, reservation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Reservation) error); ok {
		r0 = rf(ctx, reservation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
