package mocks

import (
	"context"

	"github.com/portaria-keys/internal/entity"
	"github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// KeyRepository is an autogenerated mock type for the KeyRepository type
type KeyRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, key
func (_m *KeyRepository) Create(ctx context.Context, key *entity.Key) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Key) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *KeyRepository) Delete(ctx context.Context, id primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *KeyRepository) GetAll(ctx context.Context) ([]*entity.Key, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Key
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Key); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvailableKeys provides a mock function with given fields: ctx
func (_m *KeyRepository) GetAvailableKeys(ctx context.Context) ([]*entity.Key, error) {
	ret := _m.Called(ctx)

	var r0 []*entity.Key
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.Key); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *KeyRepository) GetByID(ctx context.Context, id primitive.ObjectID) (*entity.Key, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Key
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *entity.Key); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *KeyRepository) GetByName(ctx context.Context, name string) (*entity.Key, error) {
	ret := _m.Called(ctx, name)

	var r0 *entity.Key
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Key); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, key
func (_m *KeyRepository) Update(ctx context.Context, key *entity.Key) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Key) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
